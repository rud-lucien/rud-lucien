

/*
 * SensorTemplate.cpp - Implementation of the Generic Sensor Template
 * This file contains the implementation of reading and processing sensor data
 * in a functional programming approach for Arduino projects.
 */
üìå Reusable Sensor Template for Arduino (Functional Style)
This template allows you to set up any analog or I2C-based sensor using a functional programming approach. Save this cheat sheet and use it whenever you need to add new sensors to an Arduino project.

üìÅ 1. SensorTemplate.h (Header File)
Defines the sensor configuration struct and function prototypes.

cpp
Copy
Edit
/*
 * SensorTemplate.h - Generic Sensor Handling Template
 * This template allows you to set up any analog or I2C-based sensor
 * using a functional programming approach in Arduino.
 */

#ifndef SENSOR_TEMPLATE_H
#define SENSOR_TEMPLATE_H

#include <Arduino.h>

// Sensor Configuration Struct
struct SensorConfig {
    uint8_t sensorPin;      // Analog pin for analog sensors
    uint8_t i2cAddress;     // I2C address for digital sensors
    uint8_t muxChannel;     // Multiplexer channel (if used)
    float minValue;         // Minimum sensor value (e.g., 0 psi, 0 ¬∞C)
    float maxValue;         // Maximum sensor value (e.g., 100 psi, 100 ¬∞C)
};

// Function prototypes
void selectMultiplexerChannel(uint8_t channel);
float readSensorValue(const SensorConfig &config);
void processSensorData(const SensorConfig &config, void (*callback)(float));

#endif
üìÅ 2. SensorTemplate.cpp (Implementation)
Implements sensor reading and data processing.

cpp
Copy
Edit
/*
 * SensorTemplate.cpp - Implementation of the Generic Sensor Template
 * This file contains the implementation of reading and processing sensor data
 * in a functional programming approach for Arduino projects.
 */

#include "SensorTemplate.h"
#include <Wire.h>

// Function to select I2C multiplexer channel (if applicable)
void selectMultiplexerChannel(uint8_t channel) {
    Wire.beginTransmission(0x70); // I2C multiplexer address
    Wire.write(1 << channel);
    Wire.endTransmission();
}

// Function to read sensor value (either analog or I2C)
float readSensorValue(const SensorConfig &config) {
    if (config.i2cAddress > 0) { // Digital sensor
        selectMultiplexerChannel(config.muxChannel);
        Wire.requestFrom(config.i2cAddress, (uint8_t)2);
        if (Wire.available() >= 2) {
            int rawValue = (Wire.read() << 8) | Wire.read();
            return (rawValue / 65535.0) * (config.maxValue - config.minValue) + config.minValue;
        }
        return NAN; // Return Not-a-Number if reading fails
    } else { // Analog sensor
        int rawValue = analogRead(config.sensorPin);
        return (rawValue / 1023.0) * (config.maxValue - config.minValue) + config.minValue;
    }
}

// Higher-order function to process sensor data
void processSensorData(const SensorConfig &config, void (*callback)(float)) {
    float value = readSensorValue(config);
    if (!isnan(value)) {
        callback(value);
    }
}
üìÅ 3. SensorExample.ino (Example Sketch)
Demonstrates how to use the template in an Arduino sketch.

cpp
Copy
Edit
/*
 * SensorExample.ino - Example usage of Sensor Template
 * This Arduino sketch demonstrates how to use the functional programming
 * sensor template to read from both analog and I2C sensors.
 */

#include "SensorTemplate.h"

SensorConfig tempSensor = {A0, 0, 1, 0, 100};  // Analog temperature sensor
SensorConfig humiditySensor = {0, 0x44, 2, 0, 100};  // I2C humidity sensor

void printSensorValue(float value) {
    Serial.print("Sensor Value: ");
    Serial.println(value);
}

void setup() {
    Serial.begin(115200);
    Wire.begin();
}

void loop() {
    static unsigned long lastUpdate = 0;
    const unsigned long interval = 1000;

    if (millis() - lastUpdate >= interval) {
        lastUpdate = millis();
        processSensorData(tempSensor, printSensorValue);
        processSensorData(humiditySensor, printSensorValue);
    }
}
üìå How to Use This Template
Copy all three files (SensorTemplate.h, SensorTemplate.cpp, and SensorExample.ino) into your project.
Include SensorTemplate.h in your Arduino sketch.
Define sensor configurations using SensorConfig for each sensor.
Use processSensorData() with a callback function to handle data dynamically.
Use millis() for non-blocking execution.
‚úÖ Key Features
‚úÖ Works with both analog and I2C sensors
‚úÖ Encapsulates configuration in a struct (SensorConfig)
‚úÖ Uses pure functions (readSensorValue(), processSensorData())
‚úÖ Passes configuration by reference (const &) to avoid memory overhead
‚úÖ Uses higher-order functions for dynamic behavior
‚úÖ Separates sensor logic from output handling (printSensorValue())
‚úÖ Supports millis() for non-blocking execution

üìå Save This as a Cheat Sheet for Future Use
Whenever you need to set up new sensors, follow these steps:

Define a SensorConfig struct for each sensor.
Use readSensorValue() to get sensor data.
Use processSensorData() with a callback to handle the data dynamically.
Use millis() in loop() to keep execution non-blocking.
Now you have a fully reusable framework for any sensor-based project in Arduino! üöÄ

Would you like additional enhancements (e.g., logging, error handling, multiple callback support)? üòä

#########################################################################################################
üìå Updated Code for Multiple Temperature & Humidity Sensors
This update modifies the Arduino Sketch (SensorExample.ino) to handle four temperature sensors and four humidity sensors.

üîπ What Changed?
Stored multiple sensor configurations in arrays (tempSensors[], humiditySensors[]).
Used a loop to iterate through all sensors and process their data.
Maintained non-blocking execution using millis().
üìÅ Updated Example Sketch (SensorExample.ino)
cpp
Copy
Edit
#include "SensorTemplate.h"

SensorConfig tempSensors[] = {
    {A0, 0, 1, 0, 100},  // Analog temperature sensor 1
    {A1, 0, 2, 0, 100},  // Analog temperature sensor 2
    {A2, 0, 3, 0, 100},  // Analog temperature sensor 3
    {A3, 0, 4, 0, 100}   // Analog temperature sensor 4
};

SensorConfig humiditySensors[] = {
    {0, 0x44, 5, 0, 100},  // I2C humidity sensor 1
    {0, 0x45, 6, 0, 100},  // I2C humidity sensor 2
    {0, 0x46, 7, 0, 100},  // I2C humidity sensor 3
    {0, 0x47, 8, 0, 100}   // I2C humidity sensor 4
};

void printSensorValue(float value) {
    Serial.print("Sensor Value: ");
    Serial.println(value);
}

void setup() {
    Serial.begin(115200);
    Wire.begin();
}

void loop() {
    static unsigned long lastUpdate = 0;
    const unsigned long interval = 1000;

    if (millis() - lastUpdate >= interval) {
        lastUpdate = millis();

        for (SensorConfig &sensor : tempSensors) {
            processSensorData(sensor, printSensorValue);
        }
        for (SensorConfig &sensor : humiditySensors) {
            processSensorData(sensor, printSensorValue);
        }
    }
}
üìå Key Benefits of This Update
‚úÖ Handles multiple sensors efficiently using arrays and loops.
‚úÖ Maintains non-blocking execution (millis() instead of delay()).
‚úÖ Easily expandable (just add more sensors to the arrays).
‚úÖ Uses processSensorData() dynamically to separate data collection from processing.

Now you can easily scale this for even more sensors in future projects! üöÄ
####################################################################################################################

üìå Updated Code with Logging and Error Handling
This update adds: ‚úÖ Logging (logSensorData()) to keep track of sensor readings.
‚úÖ Error handling (handleSensorError()) for sensor failures or out-of-range values.

üìÅ Updated Example Sketch (SensorExample.ino)
cpp
Copy
Edit
#include "SensorTemplate.h"

SensorConfig tempSensors[] = {
    {A0, 0, 1, 0, 100},  // Analog temperature sensor 1
    {A1, 0, 2, 0, 100},  // Analog temperature sensor 2
    {A2, 0, 3, 0, 100},  // Analog temperature sensor 3
    {A3, 0, 4, 0, 100}   // Analog temperature sensor 4
};

SensorConfig humiditySensors[] = {
    {0, 0x44, 5, 0, 100},  // I2C humidity sensor 1
    {0, 0x45, 6, 0, 100},  // I2C humidity sensor 2
    {0, 0x46, 7, 0, 100},  // I2C humidity sensor 3
    {0, 0x47, 8, 0, 100}   // I2C humidity sensor 4
};

void printSensorValue(float value) {
    Serial.print("Sensor Value: ");
    Serial.println(value);
}

void setup() {
    Serial.begin(115200);
    Wire.begin();
}

void loop() {
    static unsigned long lastUpdate = 0;
    const unsigned long interval = 1000;

    if (millis() - lastUpdate >= interval) {
        lastUpdate = millis();

        for (SensorConfig &sensor : tempSensors) {
            processSensorData(sensor, printSensorValue);
        }
        for (SensorConfig &sensor : humiditySensors) {
            processSensorData(sensor, printSensorValue);
        }
    }
}
üìå New Functions Added
Logging Function
cpp
Copy
Edit
void logSensorData(const char* sensorType, float value) {
    Serial.print("[LOG] ");
    Serial.print(sensorType);
    Serial.print(" Reading: ");
    Serial.println(value);
}
‚úÖ Logs every sensor reading.

Error Handling Function
cpp
Copy
Edit
void handleSensorError(const SensorConfig &config) {
    Serial.print("[ERROR] Sensor failure detected on Pin: ");
    Serial.println(config.sensorPin);
}
‚úÖ Detects and logs sensor failures or out-of-range values.

üìå Key Benefits of This Update
‚úÖ Logs sensor readings for tracking & debugging.
‚úÖ Detects sensor failures and prints error messages.
‚úÖ Fully functional for multiple analog and I2C sensors.

Now your sensor framework is more robust and easier to debug! üöÄ

################ full code with logging and error handling#############
/*
 * SensorTemplate.h - Generic Sensor Handling Template with Logging and Error Handling
 * This template allows you to set up any analog or I2C-based sensor
 * using a functional programming approach in Arduino.
 */

#ifndef SENSOR_TEMPLATE_H
#define SENSOR_TEMPLATE_H

#include <Arduino.h>

// Sensor Configuration Struct
struct SensorConfig {
    uint8_t sensorPin;      // Analog pin for analog sensors
    uint8_t i2cAddress;     // I2C address for digital sensors
    uint8_t muxChannel;     // Multiplexer channel (if used)
    float minValue;         // Minimum sensor value (e.g., 0 psi, 0 ¬∞C)
    float maxValue;         // Maximum sensor value (e.g., 100 psi, 100 ¬∞C)
};

// Function prototypes
void selectMultiplexerChannel(uint8_t channel);
float readSensorValue(const SensorConfig &config);
void processSensorData(const SensorConfig &config, void (*callback)(float));
void logSensorData(const char* sensorType, float value);
void handleSensorError(const SensorConfig &config);

#endif

/*
 * SensorTemplate.cpp - Implementation of the Generic Sensor Template with Logging and Error Handling
 * This file contains the implementation of reading and processing sensor data
 * in a functional programming approach for Arduino projects.
 */

#include "SensorTemplate.h"
#include <Wire.h>

// Function to select I2C multiplexer channel (if applicable)
void selectMultiplexerChannel(uint8_t channel) {
    Wire.beginTransmission(0x70); // I2C multiplexer address
    Wire.write(1 << channel);
    Wire.endTransmission();
}

// Function to read sensor value (either analog or I2C)
float readSensorValue(const SensorConfig &config) {
    if (config.i2cAddress > 0) { // Digital sensor
        selectMultiplexerChannel(config.muxChannel);
        Wire.requestFrom(config.i2cAddress, (uint8_t)2);
        if (Wire.available() >= 2) {
            int rawValue = (Wire.read() << 8) | Wire.read();
            return (rawValue / 65535.0) * (config.maxValue - config.minValue) + config.minValue;
        }
        handleSensorError(config);
        return NAN; // Return Not-a-Number if reading fails
    } else { // Analog sensor
        int rawValue = analogRead(config.sensorPin);
        if (rawValue == 0 || rawValue == 1023) { // Possible sensor failure or out-of-range
            handleSensorError(config);
            return NAN;
        }
        return (rawValue / 1023.0) * (config.maxValue - config.minValue) + config.minValue;
    }
}

// Higher-order function to process sensor data
void processSensorData(const SensorConfig &config, void (*callback)(float)) {
    float value = readSensorValue(config);
    if (!isnan(value)) {
        callback(value);
        logSensorData("Sensor", value);
    }
}

// Function to log sensor data
void logSensorData(const char* sensorType, float value) {
    Serial.print("[LOG] ");
    Serial.print(sensorType);
    Serial.print(" Reading: ");
    Serial.println(value);
}

// Function to handle sensor errors
void handleSensorError(const SensorConfig &config) {
    Serial.print("[ERROR] Sensor failure detected on Pin: ");
    Serial.println(config.sensorPin);
}

/*
 * SensorExample.ino - Example usage of Sensor Template with Logging and Error Handling
 * This Arduino sketch demonstrates how to use the functional programming
 * sensor template to read from multiple analog and I2C sensors.
 */

#include "SensorTemplate.h"

SensorConfig tempSensors[] = {
    {A0, 0, 1, 0, 100},  // Analog temperature sensor 1
    {A1, 0, 2, 0, 100},  // Analog temperature sensor 2
    {A2, 0, 3, 0, 100},  // Analog temperature sensor 3
    {A3, 0, 4, 0, 100}   // Analog temperature sensor 4
};

SensorConfig humiditySensors[] = {
    {0, 0x44, 5, 0, 100},  // I2C humidity sensor 1
    {0, 0x45, 6, 0, 100},  // I2C humidity sensor 2
    {0, 0x46, 7, 0, 100},  // I2C humidity sensor 3
    {0, 0x47, 8, 0, 100}   // I2C humidity sensor 4
};

void printSensorValue(float value) {
    Serial.print("Sensor Value: ");
    Serial.println(value);
}

void setup() {
    Serial.begin(115200);
    Wire.begin();
}

void loop() {
    static unsigned long lastUpdate = 0;
    const unsigned long interval = 1000;

    if (millis() - lastUpdate >= interval) {
        lastUpdate = millis();

        for (SensorConfig &sensor : tempSensors) {
            processSensorData(sensor, printSensorValue);
        }
        for (SensorConfig &sensor : humiditySensors) {
            processSensorData(sensor, printSensorValue);
        }
    }
}

######################## error explination ####################
üìå How Does handleSensorError() Work?
You're right to ask this question! The handleSensorError() function doesn‚Äôt actively detect errors by itself; instead, it is called inside readSensorValue() when a sensor read failure is detected.

üìå Where Does handleSensorError() Get Error Information From?
Errors are detected inside readSensorValue(), based on failed sensor reads or out-of-range values.

1Ô∏è‚É£ Error Detection for I2C Sensors
In this part of readSensorValue(), we request data from an I2C sensor:

cpp
Copy
Edit
if (config.i2cAddress > 0) { // Digital sensor
    selectMultiplexerChannel(config.muxChannel);
    Wire.requestFrom(config.i2cAddress, (uint8_t)2);
    if (Wire.available() >= 2) {
        int rawValue = (Wire.read() << 8) | Wire.read();
        return (rawValue / 65535.0) * (config.maxValue - config.minValue) + config.minValue;
    }
    handleSensorError(config); // ‚ö†Ô∏è Called when I2C data is missing
    return NAN; // Return Not-a-Number if reading fails
}
üîπ How errors are detected:

If Wire.available() < 2, that means the sensor failed to respond or communication is broken.
In that case, handleSensorError(config); is called before returning NAN.
2Ô∏è‚É£ Error Detection for Analog Sensors
For analog sensors, analogRead(config.sensorPin) returns a value between 0 and 1023. Some sensors may fail silently by returning:

0 ‚Üí Possibly disconnected, broken, or no signal.
1023 ‚Üí Possible wiring issue or full-range fault.
This part of the function handles those cases:

cpp
Copy
Edit
int rawValue = analogRead(config.sensorPin);
if (rawValue == 0 || rawValue == 1023) { // ‚ö†Ô∏è Possible sensor failure
    handleSensorError(config);
    return NAN;
}
üîπ How errors are detected:

If rawValue == 0 or rawValue == 1023, handleSensorError(config); is called.
3Ô∏è‚É£ What handleSensorError() Does When Called
cpp
Copy
Edit
void handleSensorError(const SensorConfig &config) {
    Serial.print("[ERROR] Sensor failure detected on Pin: ");
    Serial.println(config.sensorPin);
}
üîπ What happens when an error is detected?

Prints an error message in the Serial Monitor.
Displays the sensor pin that is failing.
üìå Example Output When an Error Occurs
If a sensor fails or is disconnected, your Serial Monitor will show:

csharp
Copy
Edit
[ERROR] Sensor failure detected on Pin: A0
[ERROR] Sensor failure detected on Pin: A2
This helps you quickly identify which sensor is not responding.

üìå Summary
‚úÖ Errors are detected inside readSensorValue() based on:

I2C communication failures (Wire.available() < 2).
Analog sensor readings at 0 or 1023, indicating potential failure.
‚úÖ handleSensorError(config); is called when an error is detected.

‚úÖ The error handler prints a message to help debug the issue.

############## logging explination ##################
üìå How Does logSensorData() Work?
Yes! Logging sensor data works in a similar way to error handling. Instead of detecting failures, it records valid sensor readings.

üìå Where Does logSensorData() Get Its Information?
Just like handleSensorError(), the function doesn‚Äôt actively fetch data. Instead, it is called inside processSensorData() when a valid sensor reading is obtained.

1Ô∏è‚É£ Logging Inside processSensorData()
cpp
Copy
Edit
void processSensorData(const SensorConfig &config, void (*callback)(float)) {
    float value = readSensorValue(config);
    if (!isnan(value)) { // ‚úÖ Only log valid readings
        callback(value);
        logSensorData("Sensor", value);
    }
}
üîπ How logging is triggered:

Calls readSensorValue(config) to get sensor data.
If the value is valid (!isnan(value)), it:
Calls the callback function to print or process the data.
Calls logSensorData("Sensor", value); to store the reading.
2Ô∏è‚É£ How logSensorData() Works
cpp
Copy
Edit
void logSensorData(const char* sensorType, float value) {
    Serial.print("[LOG] ");
    Serial.print(sensorType);
    Serial.print(" Reading: ");
    Serial.println(value);
}
üîπ What this does:

Prints a log message in the Serial Monitor.
It tags the data with sensorType, making it easy to filter logs.
Example output:
csharp
Copy
Edit
[LOG] Sensor Reading: 25.3
[LOG] Sensor Reading: 40.1
üìå Similarities Between Logging & Error Handling
Feature	handleSensorError()	logSensorData()
When it's called	When a sensor read fails	When a valid reading is obtained
Who calls it?	readSensorValue()	processSensorData()
Purpose	Detect and report failures	Store sensor data
Output example	[ERROR] Sensor failure detected on Pin: A0	[LOG] Sensor Reading: 25.3
üìå Summary
‚úÖ Logging works the same way as error handling but for successful reads.
‚úÖ logSensorData() is triggered inside processSensorData(), just like handleSensorError().
‚úÖ Both functions act as "listeners"‚Äîthey only respond when data is available.
