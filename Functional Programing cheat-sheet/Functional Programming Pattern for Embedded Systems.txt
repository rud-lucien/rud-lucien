#################Pressure Sensor Example###############################################

Functional Programming Pattern for Embedded Systems (Arduino, Sensors, and I2C Devices)
1Ô∏è‚É£ Use a struct for Configuration Instead of a Class
Encapsulate sensor/device-specific settings in a struct.
Example:
cpp
Copy
Edit
struct SensorConfig {
    byte analogPin;
    float minValue;
    float maxValue;
};
Why?
‚úÖ Makes the configuration explicit.
‚úÖ Reduces unnecessary global state.
‚úÖ Avoids using class unless object-oriented behavior is needed.
2Ô∏è‚É£ Use Pure Functions Instead of Methods
Write stateless functions that take configuration as input.
Example:
cpp
Copy
Edit
float readVoltage(const SensorConfig &config) {
    int analogValue = analogRead(config.analogPin);
    return (analogValue / 1023.0) * 10.0;
}
Why?
‚úÖ Functions don‚Äôt depend on hidden object state.
‚úÖ Easier to test, debug, and reuse.
3Ô∏è‚É£ Pass Configuration by const & to Avoid Copying
Use const & (constant reference) to avoid unnecessary memory usage.
Example:
cpp
Copy
Edit
float readPressure(const SensorConfig &config) {
    float voltage = readVoltage(config);
    return (voltage / 10.0) * config.maxValue;
}
Why?
‚úÖ Avoids copying large structs, saving memory.
‚úÖ Ensures functions don‚Äôt accidentally modify config.
4Ô∏è‚É£ Use Higher-Order Functions to Separate Data Collection from Processing
Instead of hardcoding what to do with sensor data, pass a function pointer (callback).
Example:
cpp
Copy
Edit
void processSensorData(const SensorConfig &config, void (*callback)(float)) {
    float value = readPressure(config);
    callback(value);
}
Why?
‚úÖ Allows different behaviors without modifying core logic.
‚úÖ Example:
cpp
Copy
Edit
processSensorData(sensor1, printData);
processSensorData(sensor1, logData);
5Ô∏è‚É£ Use Dedicated Output Functions
Instead of printing inside the sensor function, pass a function pointer to handle the output.
Example:
cpp
Copy
Edit
void printData(float value) {
    Serial.print("Value: ");
    Serial.println(value);
}

void logData(float value) {
    // Log data to a file or server
}
Why?
‚úÖ Keeps business logic separate from output behavior.
‚úÖ Flexible (can print, log, or trigger actions based on data).
6Ô∏è‚É£ Use Non-Blocking Code (millis() Instead of delay())
Avoid using delay() so the microcontroller can do other tasks.
Example:
cpp
Copy
Edit
void loop() {
    static unsigned long lastUpdate = 0;
    const unsigned long interval = 500;

    if (millis() - lastUpdate >= interval) {
        lastUpdate = millis();
        processSensorData(sensor1, printData);
    }
}
Why?
‚úÖ Allows the system to remain responsive.
‚úÖ Supports multitasking, e.g., handling multiple sensors.
üìå Summary of the Functional Pattern
‚úÖ Encapsulate configuration in a struct instead of a class.
‚úÖ Use pure functions that take the struct as input instead of methods.
‚úÖ Pass configuration by const & to avoid copying.
‚úÖ Use higher-order functions to process sensor data dynamically.
‚úÖ Keep sensor logic and output logic separate.
‚úÖ Use millis() for non-blocking execution.

üìå Example Pattern Applied
cpp
Copy
Edit
// Step 1: Define a struct for sensor configuration
struct SensorConfig {
    byte analogPin;
    float minValue;
    float maxValue;
};

// Step 2: Write pure functions for sensor logic
float readVoltage(const SensorConfig &config) {
    return (analogRead(config.analogPin) / 1023.0) * 10.0;
}

float readPressure(const SensorConfig &config) {
    return (readVoltage(config) / 10.0) * config.maxValue;
}

// Step 3: Use higher-order function for flexible processing
void processSensorData(const SensorConfig &config, void (*callback)(float)) {
    callback(readPressure(config));
}

// Step 4: Separate output logic
void printData(float value) {
    Serial.print("Pressure: ");
    Serial.print(value);
    Serial.println(" psi");
}

// Step 5: Use non-blocking execution
void loop() {
    static unsigned long lastUpdate = 0;
    const unsigned long interval = 500;

    if (millis() - lastUpdate >= interval) {
        lastUpdate = millis();
        processSensorData(sensor1, printData);
    }
}

########################Temp & Humidity Sensor Example###################################
Functional Programming Pattern for Embedded Systems (Arduino, Sensors, and I2C Devices)
This pattern applies to Arduino-based sensor projects, especially those using I2C devices like the Adafruit SHT31-D Temperature & Humidity Sensor.

üîπ Key Principles of the Functional Style
‚úÖ Encapsulate sensor configuration in a struct instead of a class.
‚úÖ Use pure functions that take the struct as input instead of methods.
‚úÖ Pass configuration by const & to avoid unnecessary copies.
‚úÖ Use higher-order functions to process sensor data dynamically.
‚úÖ Keep sensor logic and output logic separate.
‚úÖ Use millis() for non-blocking execution.

üìå Step-by-Step Breakdown Using a Temperature & Humidity Sensor
1Ô∏è‚É£ Define a struct for Sensor Configuration
cpp
Copy
Edit
struct TempHumiditySensorConfig {
    uint8_t i2cAddress;  // I2C address of the sensor
    uint8_t muxChannel;  // Multiplexer channel (if using an I2C multiplexer)
};
This struct stores the sensor‚Äôs configuration, keeping it explicit and separate from logic.
2Ô∏è‚É£ Write Pure Functions for Sensor Logic
cpp
Copy
Edit
#include <Wire.h>
#include "Adafruit_SHT31.h"

Adafruit_SHT31 sht31 = Adafruit_SHT31();

// Function to select the correct I2C multiplexer channel
void selectMultiplexerChannel(uint8_t channel) {
    Wire.beginTransmission(0x70); // Multiplexer I2C address
    Wire.write(1 << channel);
    Wire.endTransmission();
}

// Function to read temperature and humidity from the sensor
float readTemperature(const TempHumiditySensorConfig &config) {
    selectMultiplexerChannel(config.muxChannel);
    return sht31.readTemperature();
}

float readHumidity(const TempHumiditySensorConfig &config) {
    selectMultiplexerChannel(config.muxChannel);
    return sht31.readHumidity();
}
These are pure functions:
They take the sensor configuration as input.
They return a value without modifying global state.
They do not print data (output logic is separate).
3Ô∏è‚É£ Use a Higher-Order Function for Dynamic Processing
cpp
Copy
Edit
void processSensorData(const TempHumiditySensorConfig &config, void (*callback)(float, float)) {
    float temperature = readTemperature(config);
    float humidity = readHumidity(config);
    callback(temperature, humidity);
}
Instead of hardcoding what to do with the data, this function:
Reads the temperature and humidity.
Calls a function pointer (callback) to process the values dynamically.
4Ô∏è‚É£ Define Different Output Functions
cpp
Copy
Edit
void printSensorData(float temperature, float humidity) {
    Serial.print(F("Temperature: "));
    Serial.print(temperature);
    Serial.print(F(" ¬∞C\tHumidity: "));
    Serial.print(humidity);
    Serial.println(F(" %"));
}

void logSensorData(float temperature, float humidity) {
    // Example: Log to SD card, cloud, or another system
    Serial.print(F("Logging data -> Temp: "));
    Serial.print(temperature);
    Serial.print(F(", Humidity: "));
    Serial.println(humidity);
}
These functions handle output separately, making it easy to swap different behaviors.
5Ô∏è‚É£ Use Non-Blocking Execution (millis() Instead of delay())
cpp
Copy
Edit
void loop() {
    static unsigned long lastUpdate = 0;
    const unsigned long interval = 1000; // Read every 1 second

    if (millis() - lastUpdate >= interval) {
        lastUpdate = millis();
        processSensorData(sensor1, printSensorData); // Print data
        processSensorData(sensor2, logSensorData);   // Log data
    }
}
Avoids delay(), allowing other tasks to run while waiting for sensor reads.
üìå Final Example Code
cpp
Copy
Edit
#include <Wire.h>
#include "Adafruit_SHT31.h"

Adafruit_SHT31 sht31 = Adafruit_SHT31();

struct TempHumiditySensorConfig {
    uint8_t i2cAddress;  
    uint8_t muxChannel;  
};

// Function to select I2C multiplexer channel
void selectMultiplexerChannel(uint8_t channel) {
    Wire.beginTransmission(0x70); // I2C multiplexer address
    Wire.write(1 << channel);
    Wire.endTransmission();
}

// Pure functions for reading sensor values
float readTemperature(const TempHumiditySensorConfig &config) {
    selectMultiplexerChannel(config.muxChannel);
    return sht31.readTemperature();
}

float readHumidity(const TempHumiditySensorConfig &config) {
    selectMultiplexerChannel(config.muxChannel);
    return sht31.readHumidity();
}

// Higher-order function: process sensor data dynamically
void processSensorData(const TempHumiditySensorConfig &config, void (*callback)(float, float)) {
    float temperature = readTemperature(config);
    float humidity = readHumidity(config);
    callback(temperature, humidity);
}

// Output functions
void printSensorData(float temperature, float humidity) {
    Serial.print(F("Temperature: "));
    Serial.print(temperature);
    Serial.print(F(" ¬∞C\tHumidity: "));
    Serial.print(humidity);
    Serial.println(F(" %"));
}

void logSensorData(float temperature, float humidity) {
    Serial.print(F("Logging data -> Temp: "));
    Serial.print(temperature);
    Serial.print(F(", Humidity: "));
    Serial.println(humidity);
}

// Sensor configurations
TempHumiditySensorConfig sensor1 = {0x44, 1};  // Sensor 1 on multiplexer channel 1
TempHumiditySensorConfig sensor2 = {0x45, 2};  // Sensor 2 on multiplexer channel 2

void setup() {
    Serial.begin(115200);
    Wire.begin();

    // Initialize sensor
    selectMultiplexerChannel(sensor1.muxChannel);
    if (!sht31.begin(sensor1.i2cAddress)) {
        Serial.println(F("Sensor 1 not detected!"));
    }

    selectMultiplexerChannel(sensor2.muxChannel);
    if (!sht31.begin(sensor2.i2cAddress)) {
        Serial.println(F("Sensor 2 not detected!"));
    }
}

void loop() {
    static unsigned long lastUpdate = 0;
    const unsigned long interval = 1000; 

    if (millis() - lastUpdate >= interval) {
        lastUpdate = millis();
        processSensorData(sensor1, printSensorData); 
        processSensorData(sensor2, logSensorData);
    }
}
üîπ Key Takeaways
‚úÖ Encapsulated sensor configuration in a struct (TempHumiditySensorConfig)
‚úÖ Used pure functions (readTemperature(), readHumidity()) instead of class methods
‚úÖ Passed config by reference (const &) to avoid copying
‚úÖ Used a higher-order function (processSensorData()) for flexibility
‚úÖ Separated sensor logic from output handling (printSensorData(), logSensorData())
‚úÖ Used millis() instead of delay() for non-blocking execution

üìå Save This as a Reference for Future Projects
Whenever you need to write sensor-based embedded code, follow these steps:

Define a struct for configuration (sensor settings, pins, addresses).
Use pure functions for sensor reading logic.
Pass configuration by const & to avoid memory overhead.
Use higher-order functions (processSensorData()) to separate logic from behavior.
Write different output functions (printSensorData(), logSensorData()).
Use millis() for non-blocking execution.